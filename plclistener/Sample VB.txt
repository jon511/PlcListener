Imports System.Net
Imports Logix

Public Class Form1

    ' *********************************
    ' * instance of NETLOGIX.PeerMessageClass with
    ' * event handler
    Dim WithEvents peerMsg As New PeerMessage()
    Dim WithEvents listener As New PlcListener.ABListener() 
    Dim msgCount As Int32

    Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load

        '* **********************************
        '* * add colums to list view
        '* *
        listView.View = View.Details
        listView.Columns.Add("Sender IP", 75, HorizontalAlignment.Left)
        listView.Columns.Add("Timestamp", 100, HorizontalAlignment.Left)
        listView.Columns.Add("Items", 75, HorizontalAlignment.Left)
        listView.Columns.Add("Name/Address", 100, HorizontalAlignment.Left)
        listView.Columns.Add("Type", 75, HorizontalAlignment.Left)
        listView.Columns.Add("Values", 140, HorizontalAlignment.Left)

        '*
        '* provide a list of ip addresses on this 
        '* machine
        EnumLocalIPAddresses()
        ipList.SelectedIndex = 0
        msgType.SelectedIndex = 0

    End Sub


    Private Sub EnumLocalIPAddresses()
        Dim ip_hostEntry As IPHostEntry
        Dim ip_Address As IPAddress

        Try
            '*
            '* Find host by name
            '*
            ip_hostEntry = Dns.GetHostEntry(Dns.GetHostName())

            '*
            '* populate ipList box with addresses
            For Each ip_Address In ip_hostEntry.AddressList
                ipList.Items.Add(ip_Address.ToString())
            Next

        Catch ex As Exception
            MessageBox.Show(ex.Message)

        End Try

    End Sub


    Public Delegate Sub MsgReceivedDelegate(ByVal e As PlcListener.MessageEventArgs)

    Private Sub peerMsg_Received(ByVal sender As Object, ByVal e As System.EventArgs) Handles listener.MessageRecieved

        ' ******************************************
        ' * since Received event is generated in a different thread
        ' * than the UI we'll need a delegate
        If InvokeRequired = True Then
            Dim newDelegate As New MsgReceivedDelegate(AddressOf MsgReceived)
            Invoke(newDelegate, e)
        Else
            MsgReceived(e)
        End If

    End Sub

    Private Sub MsgReceived(ByVal e As PlcListener.MessageEventArgs)

        Dim msgItem As ListViewItem

        msgCount = msgCount + 1

        If (listView.Items.Count > 50) Then
            listView.Items.Clear()
        End If

        msgItem = listView.Items.Add(e.IPSender)

        msgItem.SubItems.Add(e.Timestamp.ToString("hh:mm:ss.fff"))

        msgItem.SubItems.Add(e.Length.ToString())

        msgItem.SubItems.Add(e.ItemName)

        msgItem.SubItems.Add(e.NetType.ToString())

        msgItem.SubItems.Add(ItemValues(e))

        lblMsgCount.Text = msgCount.ToString()


    End Sub

    Private Function ItemValues(ByVal e As PlcListener.MessageEventArgs) As String

        Dim rtnVal As String
        Dim dataArray As Array
        Dim I As Integer

        rtnVal = ""

        If e.Length = 1 Then
            rtnVal = e.Value.ToString()
        Else
            dataArray = e.Value
            For I = 0 To dataArray.Length - 1
                rtnVal = rtnVal + dataArray(I).ToString() + ","
            Next
        End If

        ItemValues = rtnVal

    End Function

    Private Sub btnListen_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnListen.Click
        Try
            ' * Set th NIC selection
            If ipList.Text = "Any" Then
                peerMsg.IPAddressNIC = ""
            Else
                peerMsg.IPAddressNIC = ipList.Text
            End If

            ' * set the message type to listen for
            If msgType.SelectedIndex = 0 Then
                peerMsg.Protocol = PeerMessage.MSGPROTOCOL.CIP
            Else
                peerMsg.Protocol = PeerMessage.MSGPROTOCOL.CSP
            End If

            'peerMsg.Listen()
            
            listener.Listen("10.50.71.143")
            btnListen.Enabled = False
            btnShutdown.Enabled = True
            ipList.Enabled = False
            msgType.Enabled = False

        Catch ex As Exception
            MessageBox.Show(ex.Message)
        End Try

    End Sub

    Private Sub btnShutdown_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnShutdown.Click

        peerMsg.ShutDown()
        btnListen.Enabled = True
        btnShutdown.Enabled = False
        ipList.Enabled = True
        msgType.Enabled = True

    End Sub

    Private Sub btnClearList_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles btnClearList.Click

        listView.Items.Clear()

    End Sub
End Class
